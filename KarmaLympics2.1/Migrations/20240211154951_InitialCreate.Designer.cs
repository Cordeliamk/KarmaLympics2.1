// <auto-generated />
using KarmaLympics2._1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KarmaLympics2._1.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240211154951_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KarmaLympics2._1.Models.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChallengeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<int>("OccasionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OccasionId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.Occasion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HostMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccasionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccasionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Occasions");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OccasionId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OccasionId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.TeamChallenge", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId", "ChallengeId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("TeamsChallenges");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.TeamChallengeResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<int>("TeamChallengeChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("TeamChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("TeamChallengeTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamChallengeTeamId", "TeamChallengeChallengeId");

                    b.ToTable("TeamChallengeResults");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.Challenge", b =>
                {
                    b.HasOne("KarmaLympics2._1.Models.Occasion", "Occasion")
                        .WithMany("Challenges")
                        .HasForeignKey("OccasionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occasion");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.Team", b =>
                {
                    b.HasOne("KarmaLympics2._1.Models.Occasion", "Occasion")
                        .WithMany("Teams")
                        .HasForeignKey("OccasionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occasion");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.TeamChallenge", b =>
                {
                    b.HasOne("KarmaLympics2._1.Models.Challenge", "Challenge")
                        .WithMany("TeamChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KarmaLympics2._1.Models.Team", "Team")
                        .WithMany("TeamChallenges")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.TeamChallengeResult", b =>
                {
                    b.HasOne("KarmaLympics2._1.Models.TeamChallenge", "TeamChallenge")
                        .WithMany()
                        .HasForeignKey("TeamChallengeTeamId", "TeamChallengeChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamChallenge");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.Challenge", b =>
                {
                    b.Navigation("TeamChallenges");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.Occasion", b =>
                {
                    b.Navigation("Challenges");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("KarmaLympics2._1.Models.Team", b =>
                {
                    b.Navigation("TeamChallenges");
                });
#pragma warning restore 612, 618
        }
    }
}
